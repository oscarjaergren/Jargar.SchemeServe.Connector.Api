// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace MyCompiledModels
{
    public partial class ProviderDbContextModel
    {
        partial void Initialize()
        {
            var lastInspection = LastInspectionEntityType.Create(this);
            var provider = ProviderEntityType.Create(this);

            LastInspectionEntityType.CreateForeignKey1(lastInspection, provider);

            LastInspectionEntityType.CreateAnnotations(lastInspection);
            ProviderEntityType.CreateAnnotations(provider);

            AddAnnotation("ProductVersion", "8.0.0");
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var lastInspection = FindEntityType("Jargar.SchemeServe.Connector.Api.DataContract.LastInspection")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            lastInspection.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var jargarSchemeServeConnectorApiDataContractLastInspectionTableBase = new TableBase("Jargar.SchemeServe.Connector.Api.DataContract.LastInspection", null, relationalModel);
            var dateColumnBase = new ColumnBase<ColumnMappingBase>("Date", "TEXT", jargarSchemeServeConnectorApiDataContractLastInspectionTableBase);
            jargarSchemeServeConnectorApiDataContractLastInspectionTableBase.Columns.Add("Date", dateColumnBase);
            var providerIdColumnBase = new ColumnBase<ColumnMappingBase>("ProviderId", "TEXT", jargarSchemeServeConnectorApiDataContractLastInspectionTableBase);
            jargarSchemeServeConnectorApiDataContractLastInspectionTableBase.Columns.Add("ProviderId", providerIdColumnBase);
            relationalModel.DefaultTables.Add("Jargar.SchemeServe.Connector.Api.DataContract.LastInspection", jargarSchemeServeConnectorApiDataContractLastInspectionTableBase);
            var jargarSchemeServeConnectorApiDataContractLastInspectionMappingBase = new TableMappingBase<ColumnMappingBase>(lastInspection, jargarSchemeServeConnectorApiDataContractLastInspectionTableBase, true);
            jargarSchemeServeConnectorApiDataContractLastInspectionTableBase.AddTypeMapping(jargarSchemeServeConnectorApiDataContractLastInspectionMappingBase, false);
            defaultTableMappings.Add(jargarSchemeServeConnectorApiDataContractLastInspectionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)providerIdColumnBase, lastInspection.FindProperty("ProviderId")!, jargarSchemeServeConnectorApiDataContractLastInspectionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateColumnBase, lastInspection.FindProperty("Date")!, jargarSchemeServeConnectorApiDataContractLastInspectionMappingBase);

            var tableMappings = new List<TableMapping>();
            lastInspection.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var lastInspectionsTable = new Table("LastInspections", null, relationalModel);
            var providerIdColumn = new Column("ProviderId", "TEXT", lastInspectionsTable);
            lastInspectionsTable.Columns.Add("ProviderId", providerIdColumn);
            var dateColumn = new Column("Date", "TEXT", lastInspectionsTable);
            lastInspectionsTable.Columns.Add("Date", dateColumn);
            var pK_LastInspections = new UniqueConstraint("PK_LastInspections", lastInspectionsTable, new[] { providerIdColumn });
            lastInspectionsTable.PrimaryKey = pK_LastInspections;
            var pK_LastInspectionsUc = RelationalModel.GetKey(this,
                "Jargar.SchemeServe.Connector.Api.DataContract.LastInspection",
                new[] { "ProviderId" });
            pK_LastInspections.MappedKeys.Add(pK_LastInspectionsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_LastInspectionsUc).Add(pK_LastInspections);
            lastInspectionsTable.UniqueConstraints.Add("PK_LastInspections", pK_LastInspections);
            relationalModel.Tables.Add(("LastInspections", null), lastInspectionsTable);
            var lastInspectionsTableMapping = new TableMapping(lastInspection, lastInspectionsTable, true);
            lastInspectionsTable.AddTypeMapping(lastInspectionsTableMapping, false);
            tableMappings.Add(lastInspectionsTableMapping);
            RelationalModel.CreateColumnMapping(providerIdColumn, lastInspection.FindProperty("ProviderId")!, lastInspectionsTableMapping);
            RelationalModel.CreateColumnMapping(dateColumn, lastInspection.FindProperty("Date")!, lastInspectionsTableMapping);

            var provider = FindEntityType("Jargar.SchemeServe.Connector.Api.DataContract.Provider")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            provider.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var jargarSchemeServeConnectorApiDataContractProviderTableBase = new TableBase("Jargar.SchemeServe.Connector.Api.DataContract.Provider", null, relationalModel);
            var brandIdColumnBase = new ColumnBase<ColumnMappingBase>("BrandId", "TEXT", jargarSchemeServeConnectorApiDataContractProviderTableBase);
            jargarSchemeServeConnectorApiDataContractProviderTableBase.Columns.Add("BrandId", brandIdColumnBase);
            var brandNameColumnBase = new ColumnBase<ColumnMappingBase>("BrandName", "TEXT", jargarSchemeServeConnectorApiDataContractProviderTableBase);
            jargarSchemeServeConnectorApiDataContractProviderTableBase.Columns.Add("BrandName", brandNameColumnBase);
            var cacheExpirationColumnBase = new ColumnBase<ColumnMappingBase>("CacheExpiration", "TEXT", jargarSchemeServeConnectorApiDataContractProviderTableBase);
            jargarSchemeServeConnectorApiDataContractProviderTableBase.Columns.Add("CacheExpiration", cacheExpirationColumnBase);
            var charityNumberColumnBase = new ColumnBase<ColumnMappingBase>("CharityNumber", "TEXT", jargarSchemeServeConnectorApiDataContractProviderTableBase);
            jargarSchemeServeConnectorApiDataContractProviderTableBase.Columns.Add("CharityNumber", charityNumberColumnBase);
            var companiesHouseNumberColumnBase = new ColumnBase<ColumnMappingBase>("CompaniesHouseNumber", "TEXT", jargarSchemeServeConnectorApiDataContractProviderTableBase);
            jargarSchemeServeConnectorApiDataContractProviderTableBase.Columns.Add("CompaniesHouseNumber", companiesHouseNumberColumnBase);
            var constituencyColumnBase = new ColumnBase<ColumnMappingBase>("Constituency", "TEXT", jargarSchemeServeConnectorApiDataContractProviderTableBase);
            jargarSchemeServeConnectorApiDataContractProviderTableBase.Columns.Add("Constituency", constituencyColumnBase);
            var inspectionDirectorateColumnBase = new ColumnBase<ColumnMappingBase>("InspectionDirectorate", "TEXT", jargarSchemeServeConnectorApiDataContractProviderTableBase);
            jargarSchemeServeConnectorApiDataContractProviderTableBase.Columns.Add("InspectionDirectorate", inspectionDirectorateColumnBase);
            var localAuthorityColumnBase = new ColumnBase<ColumnMappingBase>("LocalAuthority", "TEXT", jargarSchemeServeConnectorApiDataContractProviderTableBase);
            jargarSchemeServeConnectorApiDataContractProviderTableBase.Columns.Add("LocalAuthority", localAuthorityColumnBase);
            var locationIdsColumnBase = new ColumnBase<ColumnMappingBase>("LocationIds", "TEXT", jargarSchemeServeConnectorApiDataContractProviderTableBase);
            jargarSchemeServeConnectorApiDataContractProviderTableBase.Columns.Add("LocationIds", locationIdsColumnBase);
            var mainPhoneNumberColumnBase = new ColumnBase<ColumnMappingBase>("MainPhoneNumber", "TEXT", jargarSchemeServeConnectorApiDataContractProviderTableBase);
            jargarSchemeServeConnectorApiDataContractProviderTableBase.Columns.Add("MainPhoneNumber", mainPhoneNumberColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "TEXT", jargarSchemeServeConnectorApiDataContractProviderTableBase);
            jargarSchemeServeConnectorApiDataContractProviderTableBase.Columns.Add("Name", nameColumnBase);
            var onspdLatitudeColumnBase = new ColumnBase<ColumnMappingBase>("OnspdLatitude", "REAL", jargarSchemeServeConnectorApiDataContractProviderTableBase);
            jargarSchemeServeConnectorApiDataContractProviderTableBase.Columns.Add("OnspdLatitude", onspdLatitudeColumnBase);
            var onspdLongitudeColumnBase = new ColumnBase<ColumnMappingBase>("OnspdLongitude", "REAL", jargarSchemeServeConnectorApiDataContractProviderTableBase);
            jargarSchemeServeConnectorApiDataContractProviderTableBase.Columns.Add("OnspdLongitude", onspdLongitudeColumnBase);
            var organisationTypeColumnBase = new ColumnBase<ColumnMappingBase>("OrganisationType", "TEXT", jargarSchemeServeConnectorApiDataContractProviderTableBase);
            jargarSchemeServeConnectorApiDataContractProviderTableBase.Columns.Add("OrganisationType", organisationTypeColumnBase);
            var ownershipTypeColumnBase = new ColumnBase<ColumnMappingBase>("OwnershipType", "TEXT", jargarSchemeServeConnectorApiDataContractProviderTableBase);
            jargarSchemeServeConnectorApiDataContractProviderTableBase.Columns.Add("OwnershipType", ownershipTypeColumnBase);
            var postalAddressCountyColumnBase = new ColumnBase<ColumnMappingBase>("PostalAddressCounty", "TEXT", jargarSchemeServeConnectorApiDataContractProviderTableBase);
            jargarSchemeServeConnectorApiDataContractProviderTableBase.Columns.Add("PostalAddressCounty", postalAddressCountyColumnBase);
            var postalAddressLine1ColumnBase = new ColumnBase<ColumnMappingBase>("PostalAddressLine1", "TEXT", jargarSchemeServeConnectorApiDataContractProviderTableBase);
            jargarSchemeServeConnectorApiDataContractProviderTableBase.Columns.Add("PostalAddressLine1", postalAddressLine1ColumnBase);
            var postalAddressLine2ColumnBase = new ColumnBase<ColumnMappingBase>("PostalAddressLine2", "TEXT", jargarSchemeServeConnectorApiDataContractProviderTableBase);
            jargarSchemeServeConnectorApiDataContractProviderTableBase.Columns.Add("PostalAddressLine2", postalAddressLine2ColumnBase);
            var postalAddressTownCityColumnBase = new ColumnBase<ColumnMappingBase>("PostalAddressTownCity", "TEXT", jargarSchemeServeConnectorApiDataContractProviderTableBase);
            jargarSchemeServeConnectorApiDataContractProviderTableBase.Columns.Add("PostalAddressTownCity", postalAddressTownCityColumnBase);
            var postalCodeColumnBase = new ColumnBase<ColumnMappingBase>("PostalCode", "TEXT", jargarSchemeServeConnectorApiDataContractProviderTableBase);
            jargarSchemeServeConnectorApiDataContractProviderTableBase.Columns.Add("PostalCode", postalCodeColumnBase);
            var providerIdColumnBase0 = new ColumnBase<ColumnMappingBase>("ProviderId", "TEXT", jargarSchemeServeConnectorApiDataContractProviderTableBase);
            jargarSchemeServeConnectorApiDataContractProviderTableBase.Columns.Add("ProviderId", providerIdColumnBase0);
            var regionColumnBase = new ColumnBase<ColumnMappingBase>("Region", "TEXT", jargarSchemeServeConnectorApiDataContractProviderTableBase);
            jargarSchemeServeConnectorApiDataContractProviderTableBase.Columns.Add("Region", regionColumnBase);
            var registrationDateColumnBase = new ColumnBase<ColumnMappingBase>("RegistrationDate", "TEXT", jargarSchemeServeConnectorApiDataContractProviderTableBase);
            jargarSchemeServeConnectorApiDataContractProviderTableBase.Columns.Add("RegistrationDate", registrationDateColumnBase);
            var registrationStatusColumnBase = new ColumnBase<ColumnMappingBase>("RegistrationStatus", "TEXT", jargarSchemeServeConnectorApiDataContractProviderTableBase);
            jargarSchemeServeConnectorApiDataContractProviderTableBase.Columns.Add("RegistrationStatus", registrationStatusColumnBase);
            var typeColumnBase = new ColumnBase<ColumnMappingBase>("Type", "TEXT", jargarSchemeServeConnectorApiDataContractProviderTableBase);
            jargarSchemeServeConnectorApiDataContractProviderTableBase.Columns.Add("Type", typeColumnBase);
            var uprnColumnBase = new ColumnBase<ColumnMappingBase>("Uprn", "TEXT", jargarSchemeServeConnectorApiDataContractProviderTableBase);
            jargarSchemeServeConnectorApiDataContractProviderTableBase.Columns.Add("Uprn", uprnColumnBase);
            var websiteColumnBase = new ColumnBase<ColumnMappingBase>("Website", "TEXT", jargarSchemeServeConnectorApiDataContractProviderTableBase);
            jargarSchemeServeConnectorApiDataContractProviderTableBase.Columns.Add("Website", websiteColumnBase);
            relationalModel.DefaultTables.Add("Jargar.SchemeServe.Connector.Api.DataContract.Provider", jargarSchemeServeConnectorApiDataContractProviderTableBase);
            var jargarSchemeServeConnectorApiDataContractProviderMappingBase = new TableMappingBase<ColumnMappingBase>(provider, jargarSchemeServeConnectorApiDataContractProviderTableBase, true);
            jargarSchemeServeConnectorApiDataContractProviderTableBase.AddTypeMapping(jargarSchemeServeConnectorApiDataContractProviderMappingBase, false);
            defaultTableMappings0.Add(jargarSchemeServeConnectorApiDataContractProviderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)providerIdColumnBase0, provider.FindProperty("ProviderId")!, jargarSchemeServeConnectorApiDataContractProviderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)brandIdColumnBase, provider.FindProperty("BrandId")!, jargarSchemeServeConnectorApiDataContractProviderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)brandNameColumnBase, provider.FindProperty("BrandName")!, jargarSchemeServeConnectorApiDataContractProviderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)cacheExpirationColumnBase, provider.FindProperty("CacheExpiration")!, jargarSchemeServeConnectorApiDataContractProviderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)charityNumberColumnBase, provider.FindProperty("CharityNumber")!, jargarSchemeServeConnectorApiDataContractProviderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)companiesHouseNumberColumnBase, provider.FindProperty("CompaniesHouseNumber")!, jargarSchemeServeConnectorApiDataContractProviderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)constituencyColumnBase, provider.FindProperty("Constituency")!, jargarSchemeServeConnectorApiDataContractProviderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)inspectionDirectorateColumnBase, provider.FindProperty("InspectionDirectorate")!, jargarSchemeServeConnectorApiDataContractProviderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)localAuthorityColumnBase, provider.FindProperty("LocalAuthority")!, jargarSchemeServeConnectorApiDataContractProviderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)locationIdsColumnBase, provider.FindProperty("LocationIds")!, jargarSchemeServeConnectorApiDataContractProviderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)mainPhoneNumberColumnBase, provider.FindProperty("MainPhoneNumber")!, jargarSchemeServeConnectorApiDataContractProviderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, provider.FindProperty("Name")!, jargarSchemeServeConnectorApiDataContractProviderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)onspdLatitudeColumnBase, provider.FindProperty("OnspdLatitude")!, jargarSchemeServeConnectorApiDataContractProviderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)onspdLongitudeColumnBase, provider.FindProperty("OnspdLongitude")!, jargarSchemeServeConnectorApiDataContractProviderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)organisationTypeColumnBase, provider.FindProperty("OrganisationType")!, jargarSchemeServeConnectorApiDataContractProviderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)ownershipTypeColumnBase, provider.FindProperty("OwnershipType")!, jargarSchemeServeConnectorApiDataContractProviderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)postalAddressCountyColumnBase, provider.FindProperty("PostalAddressCounty")!, jargarSchemeServeConnectorApiDataContractProviderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)postalAddressLine1ColumnBase, provider.FindProperty("PostalAddressLine1")!, jargarSchemeServeConnectorApiDataContractProviderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)postalAddressLine2ColumnBase, provider.FindProperty("PostalAddressLine2")!, jargarSchemeServeConnectorApiDataContractProviderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)postalAddressTownCityColumnBase, provider.FindProperty("PostalAddressTownCity")!, jargarSchemeServeConnectorApiDataContractProviderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)postalCodeColumnBase, provider.FindProperty("PostalCode")!, jargarSchemeServeConnectorApiDataContractProviderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)regionColumnBase, provider.FindProperty("Region")!, jargarSchemeServeConnectorApiDataContractProviderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)registrationDateColumnBase, provider.FindProperty("RegistrationDate")!, jargarSchemeServeConnectorApiDataContractProviderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)registrationStatusColumnBase, provider.FindProperty("RegistrationStatus")!, jargarSchemeServeConnectorApiDataContractProviderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase, provider.FindProperty("Type")!, jargarSchemeServeConnectorApiDataContractProviderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)uprnColumnBase, provider.FindProperty("Uprn")!, jargarSchemeServeConnectorApiDataContractProviderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)websiteColumnBase, provider.FindProperty("Website")!, jargarSchemeServeConnectorApiDataContractProviderMappingBase);

            var tableMappings0 = new List<TableMapping>();
            provider.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var providersTable = new Table("Providers", null, relationalModel);
            var providerIdColumn0 = new Column("ProviderId", "TEXT", providersTable);
            providersTable.Columns.Add("ProviderId", providerIdColumn0);
            var brandIdColumn = new Column("BrandId", "TEXT", providersTable);
            providersTable.Columns.Add("BrandId", brandIdColumn);
            var brandNameColumn = new Column("BrandName", "TEXT", providersTable);
            providersTable.Columns.Add("BrandName", brandNameColumn);
            var cacheExpirationColumn = new Column("CacheExpiration", "TEXT", providersTable);
            providersTable.Columns.Add("CacheExpiration", cacheExpirationColumn);
            var charityNumberColumn = new Column("CharityNumber", "TEXT", providersTable);
            providersTable.Columns.Add("CharityNumber", charityNumberColumn);
            var companiesHouseNumberColumn = new Column("CompaniesHouseNumber", "TEXT", providersTable);
            providersTable.Columns.Add("CompaniesHouseNumber", companiesHouseNumberColumn);
            var constituencyColumn = new Column("Constituency", "TEXT", providersTable);
            providersTable.Columns.Add("Constituency", constituencyColumn);
            var inspectionDirectorateColumn = new Column("InspectionDirectorate", "TEXT", providersTable);
            providersTable.Columns.Add("InspectionDirectorate", inspectionDirectorateColumn);
            var localAuthorityColumn = new Column("LocalAuthority", "TEXT", providersTable);
            providersTable.Columns.Add("LocalAuthority", localAuthorityColumn);
            var locationIdsColumn = new Column("LocationIds", "TEXT", providersTable);
            providersTable.Columns.Add("LocationIds", locationIdsColumn);
            var mainPhoneNumberColumn = new Column("MainPhoneNumber", "TEXT", providersTable);
            providersTable.Columns.Add("MainPhoneNumber", mainPhoneNumberColumn);
            var nameColumn = new Column("Name", "TEXT", providersTable);
            providersTable.Columns.Add("Name", nameColumn);
            var onspdLatitudeColumn = new Column("OnspdLatitude", "REAL", providersTable);
            providersTable.Columns.Add("OnspdLatitude", onspdLatitudeColumn);
            var onspdLongitudeColumn = new Column("OnspdLongitude", "REAL", providersTable);
            providersTable.Columns.Add("OnspdLongitude", onspdLongitudeColumn);
            var organisationTypeColumn = new Column("OrganisationType", "TEXT", providersTable);
            providersTable.Columns.Add("OrganisationType", organisationTypeColumn);
            var ownershipTypeColumn = new Column("OwnershipType", "TEXT", providersTable);
            providersTable.Columns.Add("OwnershipType", ownershipTypeColumn);
            var postalAddressCountyColumn = new Column("PostalAddressCounty", "TEXT", providersTable);
            providersTable.Columns.Add("PostalAddressCounty", postalAddressCountyColumn);
            var postalAddressLine1Column = new Column("PostalAddressLine1", "TEXT", providersTable);
            providersTable.Columns.Add("PostalAddressLine1", postalAddressLine1Column);
            var postalAddressLine2Column = new Column("PostalAddressLine2", "TEXT", providersTable);
            providersTable.Columns.Add("PostalAddressLine2", postalAddressLine2Column);
            var postalAddressTownCityColumn = new Column("PostalAddressTownCity", "TEXT", providersTable);
            providersTable.Columns.Add("PostalAddressTownCity", postalAddressTownCityColumn);
            var postalCodeColumn = new Column("PostalCode", "TEXT", providersTable);
            providersTable.Columns.Add("PostalCode", postalCodeColumn);
            var regionColumn = new Column("Region", "TEXT", providersTable);
            providersTable.Columns.Add("Region", regionColumn);
            var registrationDateColumn = new Column("RegistrationDate", "TEXT", providersTable);
            providersTable.Columns.Add("RegistrationDate", registrationDateColumn);
            var registrationStatusColumn = new Column("RegistrationStatus", "TEXT", providersTable);
            providersTable.Columns.Add("RegistrationStatus", registrationStatusColumn);
            var typeColumn = new Column("Type", "TEXT", providersTable);
            providersTable.Columns.Add("Type", typeColumn);
            var uprnColumn = new Column("Uprn", "TEXT", providersTable);
            providersTable.Columns.Add("Uprn", uprnColumn);
            var websiteColumn = new Column("Website", "TEXT", providersTable);
            providersTable.Columns.Add("Website", websiteColumn);
            var pK_Providers = new UniqueConstraint("PK_Providers", providersTable, new[] { providerIdColumn0 });
            providersTable.PrimaryKey = pK_Providers;
            var pK_ProvidersUc = RelationalModel.GetKey(this,
                "Jargar.SchemeServe.Connector.Api.DataContract.Provider",
                new[] { "ProviderId" });
            pK_Providers.MappedKeys.Add(pK_ProvidersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ProvidersUc).Add(pK_Providers);
            providersTable.UniqueConstraints.Add("PK_Providers", pK_Providers);
            relationalModel.Tables.Add(("Providers", null), providersTable);
            var providersTableMapping = new TableMapping(provider, providersTable, true);
            providersTable.AddTypeMapping(providersTableMapping, false);
            tableMappings0.Add(providersTableMapping);
            RelationalModel.CreateColumnMapping(providerIdColumn0, provider.FindProperty("ProviderId")!, providersTableMapping);
            RelationalModel.CreateColumnMapping(brandIdColumn, provider.FindProperty("BrandId")!, providersTableMapping);
            RelationalModel.CreateColumnMapping(brandNameColumn, provider.FindProperty("BrandName")!, providersTableMapping);
            RelationalModel.CreateColumnMapping(cacheExpirationColumn, provider.FindProperty("CacheExpiration")!, providersTableMapping);
            RelationalModel.CreateColumnMapping(charityNumberColumn, provider.FindProperty("CharityNumber")!, providersTableMapping);
            RelationalModel.CreateColumnMapping(companiesHouseNumberColumn, provider.FindProperty("CompaniesHouseNumber")!, providersTableMapping);
            RelationalModel.CreateColumnMapping(constituencyColumn, provider.FindProperty("Constituency")!, providersTableMapping);
            RelationalModel.CreateColumnMapping(inspectionDirectorateColumn, provider.FindProperty("InspectionDirectorate")!, providersTableMapping);
            RelationalModel.CreateColumnMapping(localAuthorityColumn, provider.FindProperty("LocalAuthority")!, providersTableMapping);
            RelationalModel.CreateColumnMapping(locationIdsColumn, provider.FindProperty("LocationIds")!, providersTableMapping);
            RelationalModel.CreateColumnMapping(mainPhoneNumberColumn, provider.FindProperty("MainPhoneNumber")!, providersTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, provider.FindProperty("Name")!, providersTableMapping);
            RelationalModel.CreateColumnMapping(onspdLatitudeColumn, provider.FindProperty("OnspdLatitude")!, providersTableMapping);
            RelationalModel.CreateColumnMapping(onspdLongitudeColumn, provider.FindProperty("OnspdLongitude")!, providersTableMapping);
            RelationalModel.CreateColumnMapping(organisationTypeColumn, provider.FindProperty("OrganisationType")!, providersTableMapping);
            RelationalModel.CreateColumnMapping(ownershipTypeColumn, provider.FindProperty("OwnershipType")!, providersTableMapping);
            RelationalModel.CreateColumnMapping(postalAddressCountyColumn, provider.FindProperty("PostalAddressCounty")!, providersTableMapping);
            RelationalModel.CreateColumnMapping(postalAddressLine1Column, provider.FindProperty("PostalAddressLine1")!, providersTableMapping);
            RelationalModel.CreateColumnMapping(postalAddressLine2Column, provider.FindProperty("PostalAddressLine2")!, providersTableMapping);
            RelationalModel.CreateColumnMapping(postalAddressTownCityColumn, provider.FindProperty("PostalAddressTownCity")!, providersTableMapping);
            RelationalModel.CreateColumnMapping(postalCodeColumn, provider.FindProperty("PostalCode")!, providersTableMapping);
            RelationalModel.CreateColumnMapping(regionColumn, provider.FindProperty("Region")!, providersTableMapping);
            RelationalModel.CreateColumnMapping(registrationDateColumn, provider.FindProperty("RegistrationDate")!, providersTableMapping);
            RelationalModel.CreateColumnMapping(registrationStatusColumn, provider.FindProperty("RegistrationStatus")!, providersTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn, provider.FindProperty("Type")!, providersTableMapping);
            RelationalModel.CreateColumnMapping(uprnColumn, provider.FindProperty("Uprn")!, providersTableMapping);
            RelationalModel.CreateColumnMapping(websiteColumn, provider.FindProperty("Website")!, providersTableMapping);
            var fK_LastInspections_Providers_ProviderId = new ForeignKeyConstraint(
                "FK_LastInspections_Providers_ProviderId", lastInspectionsTable, providersTable,
                new[] { providerIdColumn },
                providersTable.FindUniqueConstraint("PK_Providers")!, ReferentialAction.Cascade);
            var fK_LastInspections_Providers_ProviderIdFk = RelationalModel.GetForeignKey(this,
                "Jargar.SchemeServe.Connector.Api.DataContract.LastInspection",
                new[] { "ProviderId" },
                "Jargar.SchemeServe.Connector.Api.DataContract.Provider",
                new[] { "ProviderId" });
            fK_LastInspections_Providers_ProviderId.MappedForeignKeys.Add(fK_LastInspections_Providers_ProviderIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_LastInspections_Providers_ProviderIdFk).Add(fK_LastInspections_Providers_ProviderId);
            lastInspectionsTable.ForeignKeyConstraints.Add(fK_LastInspections_Providers_ProviderId);
            providersTable.ReferencingForeignKeyConstraints.Add(fK_LastInspections_Providers_ProviderId);
            return relationalModel.MakeReadOnly();
        }
    }
}
