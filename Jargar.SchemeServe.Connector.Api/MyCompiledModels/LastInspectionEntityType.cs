// <auto-generated />
using System;
using System.Reflection;
using Jargar.SchemeServe.Connector.Api.DataContract;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace MyCompiledModels
{
    internal partial class LastInspectionEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Jargar.SchemeServe.Connector.Api.DataContract.LastInspection",
                typeof(LastInspection),
                baseEntityType);

            var providerId = runtimeEntityType.AddProperty(
                "ProviderId",
                typeof(string),
                afterSaveBehavior: PropertySaveBehavior.Throw);
            providerId.TypeMapping = SqliteStringTypeMapping.Default;

            var date = runtimeEntityType.AddProperty(
                "Date",
                typeof(DateTime),
                propertyInfo: typeof(LastInspection).GetProperty("Date", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LastInspection).GetField("<Date>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            date.TypeMapping = SqliteDateTimeTypeMapping.Default;

            var key = runtimeEntityType.AddKey(
                new[] { providerId });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ProviderId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ProviderId") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                unique: true,
                required: true,
                requiredDependent: true,
                ownership: true);

            var lastInspection = principalEntityType.AddNavigation("LastInspection",
                runtimeForeignKey,
                onDependent: false,
                typeof(LastInspection),
                propertyInfo: typeof(Provider).GetProperty("LastInspection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Provider).GetField("<LastInspection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                eagerLoaded: true);

            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "LastInspections");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
